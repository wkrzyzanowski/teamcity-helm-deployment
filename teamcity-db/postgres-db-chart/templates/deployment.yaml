apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres-db-chart.fullname" . }}
  labels:
  {{- include "postgres-db-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ default "RollingUpdate" .Values.deployment.strategy.type }}
    rollingUpdate:
      maxUnavailable: {{ default 0 .Values.deployment.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ default 1 .Values.deployment.strategy.rollingUpdate.maxSurge }}
  selector:
    matchLabels:
  {{- include "postgres-db-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
    {{- include "postgres-db-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres-db-chart.serviceAccountName" . }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5432
              protocol: TCP
          env:
            {{- range $k, $v := .Values.postgresdb.environment }}
            - name: {{ $k }}
              value: {{ $v }}
          {{ end }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: [ "psql", "-U", "{{ .Values.postgresdb.environment.POSTGRES_USER }}", "-d", "{{ .Values.postgresdb.environment.POSTGRES_DB }}", "-c", "SELECT 1" ]
            initialDelaySeconds: {{ default 30 .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ default 10 .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ default 10 .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ default 10 .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ default 1 .Values.livenessProbe.successThreshold }}
          readinessProbe:
            exec:
              command: [ "psql", "-U", "{{ .Values.postgresdb.environment.POSTGRES_USER }}", "-d", "{{ .Values.postgresdb.environment.POSTGRES_DB }}", "-c", "SELECT 1" ]
            initialDelaySeconds: {{ default 30 .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ default 10 .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ default 10 .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ default 10 .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ default 1 .Values.readinessProbe.successThreshold }}
          resources:
      {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{ if .Values.persistence.enabled }}
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{ include "postgres-db-chart.fullname" . }}-data-pvc
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
  {{- toYaml . | nindent 8 }}
  {{- end }}
